% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/column_stack.R
\name{column_stack}
\alias{column_stack}
\title{Merge two columns together and stack the values on top of each other}
\usage{
column_stack(
  data,
  col_name = NULL,
  top_size = 14,
  top_color = NULL,
  top_weight = "bold",
  top_style = "normal",
  top_decoration = NULL,
  bottom_size = 12,
  bottom_color = NULL,
  bottom_weight = "normal",
  bottom_style = "normal",
  bottom_decoration = NULL
)
}
\arguments{
\item{data}{Dataset containing either a text or numeric column.}

\item{col_name}{The name of the column in which it's values will be stacked underneath.
The column can contain either numeric or non-numeric data.
Only a single column can be provided.
Default is NULL.}

\item{top_size}{The size of the text displayed on top.
Default is 14.}

\item{top_color}{The color of the text displayed on top.
Default is NULL.}

\item{top_weight}{The font weight of the text displayed on top.
Options are "bold" or "normal".
Default is "bold".}

\item{top_style}{The style of the text displayed on top.
Options are "normal" or "italic".
Default is "normal".}

\item{top_decoration}{The decoration of the text displayed on top.
For example, add an underline, overline, or line-through to the text.
Default is NULL.}

\item{bottom_size}{The size of the text displayed on bottom.
Default is 12.}

\item{bottom_color}{The color of the text displayed on bottom.
Default is NULL.}

\item{bottom_weight}{The font weight of the text displayed on bottom.
Options are "bold" or "normal".
Default is "normal".}

\item{bottom_style}{The style of the text displayed on bottom.
Options are "normal" or "italic".
Default is "normal".}

\item{bottom_decoration}{The decoration of the text displayed on bottom.
For example, add an underline, overline, or line-through to the text.
Default is NULL.}
}
\value{
a function that surrounds text/values in a column
    with a colored pill button.
}
\description{
The `column_stack()` function can be used to two values from two different columns in one row.
    When `column_stack()` is called within a column, the values from that column will be displayed on top, while the values from the other column given within `col_name` will be shown underneath.
    The size, color, weight, and style of the text can be controlled for both the top and bottom values/text shown.
    To adjust the values shown on the top row, use `top_size`, `top_color`, `top_weight`, `top_style`, or `top_decoration`.
    To adjust the values shown on the bottom row, replace 'top' with 'bottom' in the options listed above.
    `column_stack()` works with both numeric and non-numeric columns.
    `column_stack()` needs to placed within the cell argument in reactable::colDef.
}
\examples{
data <- MASS::Cars93[20:49, c("Manufacturer", "Model", "MPG.city", "MPG.highway")]

## Stack text from one column underneath another column:
reactable(
data,
columns = list(
Manufacturer = colDef(cell = column_stack(data, col_name = "Model")),
Model = colDef(show = FALSE)))

## Control the appearance of both the top and bottom text:
reactable(
data,
columns = list(
Manufacturer = colDef(name = "Manufacturer/Model",
                      cell = column_stack(data,
                                          col_name = "Model",
                                          top_size = 18,
                                          top_color = "red",
                                          bottom_size = 16,
                                          bottom_color = "blue",
                                          bottom_style = "italic")),
Model = colDef(show = FALSE)))

## Can be used with columns containing numeric data:
reactable(
data,
columns = list(
MPG.city = colDef(name = "MPG City/Highway",
                  cell = column_stack(data,
                                      col_name = "MPG.highway",
                                      top_decoration = "underline",
                                      bottom_color = "green",
                                      bottom_size = 14,
                                      bottom_weight = "bold")),
MPG.highway = colDef(show = FALSE)))

## Combine both numeric and non-numeric columns together:
reactable(
data,
columns = list(
Model = colDef(name = "Model/MPG Highway",
                  cell = column_stack(data,
                                      col_name = "MPG.highway",
                                      top_weight = "normal",
                                      bottom_size = 20,
                                      bottom_color = "green",
                                      bottom_decoration = "underline")),
MPG.highway = colDef(show = FALSE),
MPG.city = colDef(show = FALSE)))

}
